<?php

use Mockery as m;
use Recca0120\Twzipcode\Normalizer;

class NormalizerTest extends PHPUnit_Framework_TestCase
{
    public function tearDown()
    {
        m::close();
    }

    public function setUp()
    {
        $this->units = ['段', '路', '街', '巷', '弄', '號', '樓'];
    }

    public function test_normalize()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $data = [
            '台北市大安區市府路1之1號',
            '臺北市大安區市府路１之１號',
            '臺北市　大安區　市府路 1 之 1 號',
            '臺北市，大安區，市府路 1 之 1 號',
            '臺北市，大安區，市府路 1 之 1 號',
            '臺北市, 大安區, 市府路 1 之 1 號',
            '臺北市, 大安區, 市府路 1 - 1 號',
        ];

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        foreach ($data as $address) {
            $normalizer = new Normalizer($address);
            $this->assertSame('臺北市大安區市府路1之1號', (string) $normalizer->regularize());
        }
    }

    public function test_digitize_9()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        foreach ($this->units as $unit) {
            $normalizer = new Normalizer('四'.$unit);
            $this->assertSame('4'.$unit, (string) $normalizer->digitize());
        }
    }

    public function test_digitize_14()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        foreach ($this->units as $unit) {
            $normalizer = new Normalizer('十四'.$unit);
            $this->assertSame('14'.$unit, (string) $normalizer->digitize());
        }
    }

    public function test_digitize_94()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        foreach ($this->units as $unit) {
            $normalizer = new Normalizer('九十四'.$unit);
            $this->assertSame('94'.$unit, (string) $normalizer->digitize());
        }
    }

    public function test_digitize_947()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        foreach ($this->units as $unit) {
            $normalizer = new Normalizer('九百四十七'.$unit);
            $this->assertSame('947'.$unit, (string) $normalizer->digitize());
        }
    }

    public function test_digitize_9478()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        foreach ($this->units as $unit) {
            $normalizer = new Normalizer('九千四百七十八'.$unit);
            $this->assertSame('9478'.$unit, (string) $normalizer->digitize());
        }
    }
}
